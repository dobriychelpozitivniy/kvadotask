// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kvado

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvadoClient is the client API for Kvado service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvadoClient interface {
	FindBooksByAuthorID(ctx context.Context, in *FindBooksByAuthorIDRequest, opts ...grpc.CallOption) (*FindBooksResponse, error)
	FindAuthorsByBookID(ctx context.Context, in *FindAuthorsByBookIDRequest, opts ...grpc.CallOption) (*FindAuthorsResponse, error)
	FindAuthorsByBookName(ctx context.Context, in *FindAuthorsByBookNameRequest, opts ...grpc.CallOption) (*FindAuthorsResponse, error)
	FindBooksByAuthorName(ctx context.Context, in *FindBooksByAuthorNameRequest, opts ...grpc.CallOption) (*FindBooksResponse, error)
}

type kvadoClient struct {
	cc grpc.ClientConnInterface
}

func NewKvadoClient(cc grpc.ClientConnInterface) KvadoClient {
	return &kvadoClient{cc}
}

func (c *kvadoClient) FindBooksByAuthorID(ctx context.Context, in *FindBooksByAuthorIDRequest, opts ...grpc.CallOption) (*FindBooksResponse, error) {
	out := new(FindBooksResponse)
	err := c.cc.Invoke(ctx, "/Kvado/FindBooksByAuthorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvadoClient) FindAuthorsByBookID(ctx context.Context, in *FindAuthorsByBookIDRequest, opts ...grpc.CallOption) (*FindAuthorsResponse, error) {
	out := new(FindAuthorsResponse)
	err := c.cc.Invoke(ctx, "/Kvado/FindAuthorsByBookID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvadoClient) FindAuthorsByBookName(ctx context.Context, in *FindAuthorsByBookNameRequest, opts ...grpc.CallOption) (*FindAuthorsResponse, error) {
	out := new(FindAuthorsResponse)
	err := c.cc.Invoke(ctx, "/Kvado/FindAuthorsByBookName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvadoClient) FindBooksByAuthorName(ctx context.Context, in *FindBooksByAuthorNameRequest, opts ...grpc.CallOption) (*FindBooksResponse, error) {
	out := new(FindBooksResponse)
	err := c.cc.Invoke(ctx, "/Kvado/FindBooksByAuthorName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvadoServer is the server API for Kvado service.
// All implementations must embed UnimplementedKvadoServer
// for forward compatibility
type KvadoServer interface {
	FindBooksByAuthorID(context.Context, *FindBooksByAuthorIDRequest) (*FindBooksResponse, error)
	FindAuthorsByBookID(context.Context, *FindAuthorsByBookIDRequest) (*FindAuthorsResponse, error)
	FindAuthorsByBookName(context.Context, *FindAuthorsByBookNameRequest) (*FindAuthorsResponse, error)
	FindBooksByAuthorName(context.Context, *FindBooksByAuthorNameRequest) (*FindBooksResponse, error)
	mustEmbedUnimplementedKvadoServer()
}

// UnimplementedKvadoServer must be embedded to have forward compatible implementations.
type UnimplementedKvadoServer struct {
}

func (UnimplementedKvadoServer) FindBooksByAuthorID(context.Context, *FindBooksByAuthorIDRequest) (*FindBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBooksByAuthorID not implemented")
}
func (UnimplementedKvadoServer) FindAuthorsByBookID(context.Context, *FindAuthorsByBookIDRequest) (*FindAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAuthorsByBookID not implemented")
}
func (UnimplementedKvadoServer) FindAuthorsByBookName(context.Context, *FindAuthorsByBookNameRequest) (*FindAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAuthorsByBookName not implemented")
}
func (UnimplementedKvadoServer) FindBooksByAuthorName(context.Context, *FindBooksByAuthorNameRequest) (*FindBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBooksByAuthorName not implemented")
}
func (UnimplementedKvadoServer) mustEmbedUnimplementedKvadoServer() {}

// UnsafeKvadoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvadoServer will
// result in compilation errors.
type UnsafeKvadoServer interface {
	mustEmbedUnimplementedKvadoServer()
}

func RegisterKvadoServer(s grpc.ServiceRegistrar, srv KvadoServer) {
	s.RegisterService(&Kvado_ServiceDesc, srv)
}

func _Kvado_FindBooksByAuthorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBooksByAuthorIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvadoServer).FindBooksByAuthorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kvado/FindBooksByAuthorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvadoServer).FindBooksByAuthorID(ctx, req.(*FindBooksByAuthorIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvado_FindAuthorsByBookID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAuthorsByBookIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvadoServer).FindAuthorsByBookID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kvado/FindAuthorsByBookID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvadoServer).FindAuthorsByBookID(ctx, req.(*FindAuthorsByBookIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvado_FindAuthorsByBookName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAuthorsByBookNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvadoServer).FindAuthorsByBookName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kvado/FindAuthorsByBookName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvadoServer).FindAuthorsByBookName(ctx, req.(*FindAuthorsByBookNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvado_FindBooksByAuthorName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBooksByAuthorNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvadoServer).FindBooksByAuthorName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kvado/FindBooksByAuthorName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvadoServer).FindBooksByAuthorName(ctx, req.(*FindBooksByAuthorNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kvado_ServiceDesc is the grpc.ServiceDesc for Kvado service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kvado_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Kvado",
	HandlerType: (*KvadoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindBooksByAuthorID",
			Handler:    _Kvado_FindBooksByAuthorID_Handler,
		},
		{
			MethodName: "FindAuthorsByBookID",
			Handler:    _Kvado_FindAuthorsByBookID_Handler,
		},
		{
			MethodName: "FindAuthorsByBookName",
			Handler:    _Kvado_FindAuthorsByBookName_Handler,
		},
		{
			MethodName: "FindBooksByAuthorName",
			Handler:    _Kvado_FindBooksByAuthorName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/proto/kvado.proto",
}
